for (i in 1:30) {
#计算均值
mean = V2 / ErrorSquare * (y[i] - miu - Alpha[i])
#计算方差
sigmaSquare = V2
#抽样
beta[i] = rnorm(1, mean, sqrt(sigmaSquare))
}
return(beta)
}
# Gibbs 抽样的主程序
# 初始化参数
miu = mean(y)
alpha = rep(0, 15)
beta = rep(0, 30)
#迭代次数
it_num = 10000
vectorMiu = vector()
vectorAlpha = vector()
vectorBeta = vector()
for (i in 1:it_num) {
## 更新miu
miu = sampleMiu(alpha, beta, y)
vectorMiu = append(vectorMiu, miu)
## 更新alpha
alpha = sampleAlpha(miu, beta, y)
vectorAlpha = append(vectorAlpha,alpha)
## 更新beta
beta = sampleBeta(miu, alpha, y)
vectorBeta = append(vectorBeta,beta)
}
# 打印结果
#print(paste('miu的结果:', miu))
#print(paste('alpha的结果:', alpha))
#print(paste('beta的结果:', beta))
xlabel = 1:it_num
plot(xlabel, vectorMiu)
lines(xlabel, vectorMiu)
#取预烧期为 100
preHot = 100
stableMiu = vectorMiu[-(1:preHot)]
stableAlpha = vectorAlpha[-(1:(preHot*15))]
stableBeta = vectorBeta[-(1:(preHot*30))]
stableMiuAdj = rep(stableMiu,each = 30)
stableAlphaAdj = rep(stableGamma,each = 2)
stableBetaAdj = stableBeta
corrtable_a = data.frame(
Miu = stableMiuAdj,
Alpha = stableAlphaAdj,
Beta = stableBetaAdj
)
corr_a = cor(corrtable_a)
corrplot(corr_a,type="upper",tl.col ="black",tl.srt = 45)
acf(stabelMiu)
acf(stableAlpha)
acf(stableBeta)
## 程序包的引入
library(corrplot)
## 数据载入
data_experiment = read.table('pigment.dat', header = TRUE)
## 程序包的引入
library(corrplot)
## 数据载入
data_experiment = read.table('pigment.dat', header = TRUE)
#随机种子
set.seed(42)
# 初始化已知参数并计算 n,V1,V2.
AlphaSquare = 86
BetaSquare = 58
ErrorSquare = 1
Ji = 2
n = 30
V1 = 1 / (Ji / ErrorSquare + 1 / AlphaSquare)
V2 = 1 / (1 / ErrorSquare + 1 / BetaSquare)
y = data_experiment[, 3]
# miu的抽样程序,输入alpha,beta,y,得到一个服从其正态分布的样本
sampleMiu = function(alpha, beta, y) {
#计算均值
y_mean = mean(y)
j_vec = rep(2, times = 15)
mean = y_mean - 1 / n * (j_vec %*% alpha) - 1 / n * sum(beta)
#计算方差
sigmaSquare = ErrorSquare / n
#抽样,整体只有一个mu,所以抽样1次
miu = rnorm(n = 1, mean, sd = sqrt(sigmaSquare))
return (miu)
}
# Alpha 的抽样程序,输入miu,beta,y,得到15个服从其正态分布的样本
sampleAlpha = function(miu, beta, y) {
for (i in 1:15) {
#计算均值
mean = Ji * V1 / ErrorSquare * ((y[2 * i - 1] + y[2 * i]) / 2 - miu -
1 / Ji * (beta[2 * i - 1] + beta[2 * i]))
#计算方差
sigmaSquare = V1
#抽样
alpha[i] = rnorm(1, mean, sqrt(V1))
}
return(alpha)
}
# Beta的抽样程序,输入miu,alpha,y,得到30个服从其正态分布的样本
sampleBeta = function(miu, alpha, y) {
Alpha = rep(alpha, each = 2)
for (i in 1:30) {
#计算均值
mean = V2 / ErrorSquare * (y[i] - miu - Alpha[i])
#计算方差
sigmaSquare = V2
#抽样
beta[i] = rnorm(1, mean, sqrt(sigmaSquare))
}
return(beta)
}
# Gibbs 抽样的主程序
# 初始化参数
miu = 100
alpha = rep(0, 15)
beta = rep(0, 30)
#迭代次数
it_num = 1000
vectorMiu = vector()
vectorAlpha = vector()
vectorBeta = vector()
for (i in 1:it_num) {
## 更新miu
miu = sampleMiu(alpha, beta, y)
vectorMiu = append(vectorMiu, miu)
## 更新alpha
alpha = sampleAlpha(miu, beta, y)
vectorAlpha = append(vectorAlpha,alpha)
## 更新beta
beta = sampleBeta(miu, alpha, y)
vectorBeta = append(vectorBeta,beta)
}
# 打印结果
#print(paste('miu的结果:', miu))
#print(paste('alpha的结果:', alpha))
#print(paste('beta的结果:', beta))
xlabel = 1:it_num
plot(xlabel, vectorMiu)
lines(xlabel, vectorMiu)
## 程序包的引入
library(corrplot)
## 数据载入
data_experiment = read.table('pigment.dat', header = TRUE)
#随机种子
set.seed(42)
# 初始化已知参数并计算 n,V1,V2.
AlphaSquare = 86
BetaSquare = 58
ErrorSquare = 1
Ji = 2
n = 30
V1 = 1 / (Ji / ErrorSquare + 1 / AlphaSquare)
V2 = 1 / (1 / ErrorSquare + 1 / BetaSquare)
y = data_experiment[, 3]
# miu的抽样程序,输入alpha,beta,y,得到一个服从其正态分布的样本
sampleMiu = function(alpha, beta, y) {
#计算均值
y_mean = mean(y)
j_vec = rep(2, times = 15)
mean = y_mean - 1 / n * (j_vec %*% alpha) - 1 / n * sum(beta)
#计算方差
sigmaSquare = ErrorSquare / n
#抽样,整体只有一个mu,所以抽样1次
miu = rnorm(n = 1, mean, sd = sqrt(sigmaSquare))
return (miu)
}
# Alpha 的抽样程序,输入miu,beta,y,得到15个服从其正态分布的样本
sampleAlpha = function(miu, beta, y) {
for (i in 1:15) {
#计算均值
mean = Ji * V1 / ErrorSquare * ((y[2 * i - 1] + y[2 * i]) / 2 - miu -
1 / Ji * (beta[2 * i - 1] + beta[2 * i]))
#计算方差
sigmaSquare = V1
#抽样
alpha[i] = rnorm(1, mean, sqrt(V1))
}
return(alpha)
}
# Beta的抽样程序,输入miu,alpha,y,得到30个服从其正态分布的样本
sampleBeta = function(miu, alpha, y) {
Alpha = rep(alpha, each = 2)
for (i in 1:30) {
#计算均值
mean = V2 / ErrorSquare * (y[i] - miu - Alpha[i])
#计算方差
sigmaSquare = V2
#抽样
beta[i] = rnorm(1, mean, sqrt(sigmaSquare))
}
return(beta)
}
# Gibbs 抽样的主程序
# 初始化参数
miu = 100
alpha = rep(0, 15)
beta = rep(0, 30)
#迭代次数
it_num = 1000
vectorMiu = vector()
vectorAlpha = vector()
vectorBeta = vector()
for (i in 1:it_num) {
## 更新miu
miu = sampleMiu(alpha, beta, y)
vectorMiu = append(vectorMiu, miu)
## 更新alpha
alpha = sampleAlpha(miu, beta, y)
vectorAlpha = append(vectorAlpha,alpha)
## 更新beta
beta = sampleBeta(miu, alpha, y)
vectorBeta = append(vectorBeta,beta)
}
# 打印结果
#print(paste('miu的结果:', miu))
#print(paste('alpha的结果:', alpha))
#print(paste('beta的结果:', beta))
xlabel = 1:it_num
plot(xlabel, vectorMiu)
lines(xlabel, vectorMiu)
for (i in 1:it_num) {
## 更新miu
miu = sampleMiu(alpha, beta, y)
vectorMiu = append(vectorMiu, miu)
## 更新alpha
alpha = sampleAlpha(miu, beta, y)
vectorAlpha = append(vectorAlpha,alpha)
## 更新beta
beta = sampleBeta(miu, alpha, y)
vectorBeta = append(vectorBeta,beta)
}
## 程序包的引入
library(corrplot)
## 数据载入
data_experiment = read.table('pigment.dat', header = TRUE)
data_combine = read.csv("data_combine.csv")
hist(data_combine[,1],xlab = 'Length',main = 'Histogram of Length')
hist(data_combine[,1],xlab = 'Length',main = 'Histogram of Length (cm)')
hist(data_combine[,2],xlab = 'Width',main = 'Histogram of Width (cm)')
hist(data_combine[,1],xlab = 'Length',main = 'Histogram of Length (cm)')
hist(data_combine[,2],xlab = 'Width',main = 'Histogram of Width (cm)')
hist(data_combine[,3],xlab = 'Height',main = 'Histogram of Height (cm)')
hist(data_combine[,4],xlab = 'Volume',main = 'Histogram of Volume (cm)')
summary(fit_w_gamma_log_up)
predwgammalog = pred(fit_w_gamma_log_up,data_combine)
predwgammalog = predict(fit_w_gamma_log_up,data_combine)
predwgammaid = predict(fit_w_gamma_Id_up,data_combine)
plot(
xlabel,
predwgammaid,
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
## comparison for width
xlabel = 1:length(data_combine[, 1])
plot(
xlabel,
predwgammaid,
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
predwgammalog,
col = "green",
type = "b")
legend(
"topleft",
inset = .05,
c("Gamma(Id)","raw data" ,"Gamma(log)"),
lty = c(1, 2),
pch = c(4, 1),
col = c("red", "blue","green")
)
plot(
xlabel,
predwgammaid,
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
predwgammalog,
col = "green",
type = "b")
predwgammalog = predict(fit_w_gamma_log_up,data_combine)
lines(xlabel,
predwgammalog,
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
plot(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
## comparison for length
xlabel = 1:length(data_combine[, 1])
plot(xlabel, predlgammaid)
plot(
xlabel,
predlgammaid,
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 1]),
col = "blue",
type = "b")
lines(xlabel,
predlgammalog,
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "yellow",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(data_combine[, 2]),
col = "green",
type = "b")
lines(xlabel,
sort(data_combine[, 2]),
col = "blue",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
plot(
xlabel,
sort(predwgammaid),
xlab = "",
ylab = "",
col = "red",
type = "b",
pch = 4
)
lines(xlabel,
sort(predwgammalog),
col = "green",
type = "b")
